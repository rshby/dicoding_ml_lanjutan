== Time Series Forecasting ==

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(context="talk")

import tensorflow as tf
from tensorflow import nn, optimizers
from keras.models import Sequential
from keras.layers import Dense, LSTM
from keras.losses import Huber

//import dataset
df = pd.rea_csv("DailyDelhiClimate.csv")
df.head()

df.isna().sum()

dates = df["date"].values
temp = df["meantemp"].values

//plot grafik time series
plt.figure(figsize=(15, 5))
plt.plot(dates, temp)
plt.title("Temperature Average")

//preprocessing data
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
	series = tf.expand(series, axis="columns")
	ds = tf.Dataset.from_tensor_slice(series)
	ds = ds.window(window_size+1, shift=1, drop_remainder=True)
	ds = ds.flat_map(lambda x: x.batch(window_size+1))
	ds = ds.shuffle(shuffle_buffer)
	ds = ds.map(lambda x: (x[:-1], x[-1:]))
	return ds.batch(batch_size).prefetch(1)

//data train
train_set = windowes_dataset(temp, window_size=60, batch_size=64, shuffle_buffer=42)

//arsitektur model
model = Sequential([
	LSTM(64, return_sequences=True),
	LSTM(64),
	Dense(32, activation="relu"),
	Dense(16, activation="relu"),
	Dense(1)
]) 

//compile
model.compile(optimizer=optimizers.SGD(lr=0.04, momentum=0.9), loss=Huber(), metrics=["mae"])

//training
model.fit(train_set, epochs=100)
