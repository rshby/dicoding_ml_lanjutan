== Demographic Filtering ==

//filtering -> scoring -> sorting

import pandas as pd
df = pd.read_csv("data/demographic.csv")
df.head()

//sorting
df.sort_values("vote_acerage", ascending=False)

//step 1: Filter
genre = ["Animation"]
duration = (60, 150)
year = (2000, 2019)
tok_k = 20

hasil_pred = df[(df["release_date"].betweetn(year[0], year[1])) & (df["runtime"].between(duration[0], duration[1])) & (df[genre].all(axis="columns"))]

hasil_pred.head()

//step 2: Scoring
tinggal pakai kolom vote_average

//step 3: sorting
recommendation = hasil_pred.sort_values("vote_average", ascending=False).head(top_k)

== Improve Demographic FIltering ==
//bikin scroing formul sendiri

def imdb_score(df, q=0.7):
    df = df.copy()
    m = df["vote_average"].quantile(q)
    C = (df["vote_average"] * df["vote_count"]) / (df["vote_count"].sum())
    df = df[df["vote_count"] > m]
    df["score"] = df.apply(lambda x: (x["vote_average"] * x["vote_count"] + (C * m)) / (x["vote_count"] + m), axis="columns)
    return df

hasil_rekomendasi = imdb_score(df)